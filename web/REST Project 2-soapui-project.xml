<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="9ae14754-b189-41f5-9e3a-0ca172776a31" activeEnvironment="Default" name="REST Project 2" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="${projectDir}" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="f385bd32-02b6-4cd9-bf6f-4ede860519bd" port="8080" path="/" host="LAPTOP-F6UEQERJ" name="http://localhost"><con:settings/><con:properties/><con:restMockAction name="/listaarboles" method="GET" resourcePath="/listaarboles" id="e561a975-fc48-46c0-8405-0baf6c54747c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="88af8aea-898f-4a31-81d2-616cec71ae46" httpResponseStatus="200"><con:settings/><con:responseContent>{
"arboles":
{"arbol":
[{
"id":1,
"nombre":"Roble"
},
{
"id":2,
"nombre":"Algarrobo"
},
{
"id":3,
"nombre":"Cedro"
},
{
"id":4,
"nombre":"Palo Borracho"
},
{
"id":5,
"nombre":"Palmera"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listaareas" method="GET" resourcePath="/listaareas" id="7218e270-0a95-4f32-beee-bb6388ad1f63"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e6c7d04a-0c21-45ca-92a1-3ee37644f4fd" httpResponseStatus="200"><con:settings/><con:responseContent>{
"areas":
{"area":
[{
"id":1,
"nombre":"Area Geografica 1",
"iddepartamento":1,
"departamento":"Rawson",
"idcensista":1,
"nombrecensista":"Sin Asignar",
"manzanas":
[
{
"id":12,
"nombre":"manzana 14",
"calles":
[
{
"id":14,
"nombre":"Libertador"
},
{
"id":15,
"nombre":"Rawson"
}
]
},
{
"id":12,
"nombre":"manzana 15",
"calles":
[
]
}
]
},
{
"id":2,
"nombre":"Area Geografica 2",
"iddepartamento":1,
"departamento":"Rawson",
"idcensista":2,
"nombrecensista":"Hugo Gallardo",
"manzanas":
[
{
"id":12,
"nombre":"manzana 14",
"calles":
[
{
"id":14,
"nombre":"Libertador"
},
{
"id":16,
"nombre":"Laprida"
}
]
},
{
"id":12,
"nombre":"manzana 15",
"calles":
[
{
"id":4,
"nombre":"Quiroga"
}
]
}
]
},
{
"id":3,
"nombre":"Area Geografica 3",
"iddepartamento":2,
"departamento":"Chimbas",
"idcensista":2,
"nombrecensista":"Hugo Gallardo",
"manzanas":
[
{
"id":12,
"nombre":"manzana 1",
"calles":
[
{
"id":14,
"nombre":"Patagonia"
},
{
"id":15,
"nombre":"Rawson"
}
]
}
]
},
{
"id":4,
"nombre":"Area Geografica 4",
"iddepartamento":2,
"departamento":"Chimbas",
"idcensista":1,
"nombrecensista":"Sin Asignar",
"manzanas":
[
{
"id":4,
"nombre":"manzana 4",
"calles":
[
{
"id":14,
"nombre":"Neuquen"
},
{
"id":15,
"nombre":"Lorenzo Fernandez"
}
]
},
{
"id":5,
"nombre":"manzana 5",
"calles":
[
]
}
]
},
{
"id":5,
"nombre":"Area Geografica 5",
"iddepartamento":5,
"idcensista":3,
"nombrecensista":"Fernando Leiva",
"departamento":"9 de Julio",
"manzanas":
[
]
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listacalles" method="GET" resourcePath="/listacalles" id="76f68507-46f3-4d5e-a0cc-a651c72612e1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ffe1173c-fed9-414e-a9d7-e25c85501dbb" httpResponseStatus="200"><con:settings/><con:responseContent>{
"calles":
{"calle":
[{
"id":1,
"nombre":"Rawson"
},
{
"id":2,
"nombre":"Santa Fe"
},
{
"id":3,
"nombre":"Tucuman"
},
{
"id":4,
"nombre":"Patagonia"
},
{
"id":5,
"nombre":"Libertador"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listadepartamentos" method="GET" resourcePath="/listadepartamentos" id="5dedcb19-99f3-4d6b-83fe-effeabcccfd1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="33623f8c-4e28-44c6-83e2-e29b63b0b865" httpResponseStatus="200"><con:settings/><con:responseContent>{
"departamentos":
{"departamento":
[{
"id":1,
"nombre":"Rawson"
},
{
"id":2,
"nombre":"Chimbas"
},
{
"id":3,
"nombre":"Capital"
},
{
"id":4,
"nombre":"Rivadavia"
},
{
"id":5,
"nombre":"9 de Julio"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listamanzanas" method="GET" resourcePath="/listamanzanas" id="fdbe5ffc-f23d-476d-9ec5-9a95cac3d1af"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="84acb3b4-4c9a-4a75-b18d-361c08a520cc" httpResponseStatus="200"><con:settings/><con:responseContent>{
"manzanas":
{"manzana":
[{
"id":1,
"nombre":"Manzana 1"
},
{
"id":2,
"nombre":"Manzana 2"
},
{
"id":3,
"nombre":"Manzana 3"
},
{
"id":4,
"nombre":"Manzana 4"
},
{
"id":5,
"nombre":"Manzana 5"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listacensistas" method="GET" resourcePath="/listacensistas" id="90cb6e90-a7ee-4f1a-adc9-a9e6caeb0cf2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6e876d87-8646-45f5-9509-99033d683434" httpResponseStatus="200"><con:settings/><con:responseContent>{
"censistas":
{"censista":
[{
"id":1,
"nombre":"Elba",
"apellido":"Sura",
"direccion":"trinidad",
"telefono":155263748
},
{
"id":2,
"nombre":"Armando",
"apellido":"Paredes",
"direccion":"San Martin",
"telefono":155211748
},
{
"id":3,
"nombre":"Guillermo",
"apellido":"Nigote",
"direccion":"La Rioja 333 S",
"telefono":4248596
},
{
"id":4,
"nombre":"Elsa",
"apellido":"Pato",
"direccion":"Concepcion",
"telefono":155789638
},
{
"id":5,
"nombre":"Cesar",
"apellido":"Noso",
"direccion":"trinidad",
"telefono":155263748
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/languageesp" method="GET" resourcePath="/languageesp" id="4a383ed2-7d63-48cf-9afe-fb7af384fc1a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="9a0c8253-8f59-40cb-ad50-e61f1c8473e8" httpResponseStatus="200"><con:settings/><con:responseContent>{"labels":
{
"label":[
{
"id":"label1",
"texto":"hola"
},
{
"id":"label2",
"texto":"chau"
},
{
"id":"titulo",
"texto":"titulo"
},
{
"id":"descripcion",
"texto":"descripcion"
},
{
"id":"id",
"texto":"id"
},
{
"id":"stock",
"texto":"stock"
},
{
"id":"navegacion",
"texto":"Navegacion principal"
},
{
"id":"mistareas",
"texto":"Mis Tareas"
},
{
"id":"Etapas",
"texto":"Etapas"
},
{
"id":"Fraccionar",
"texto":"Fraccionar"
},
{
"id":"CargarCamion",
"texto":"Cargar Camion"
},
{
"id":"DescargaCamion",
"texto":"Descargar Camion"
},
{
"id":"EntrarCamion",
"texto":"Recepcion vehiculo"
},
{
"id":"SalidaCamion",
"texto":"Salida Camion"
},
{
"id":"duracion",
"texto":"duracion"
},
{
"id":"formulario",
"texto":"formulario"
},
{
"id":"formula",
"texto":"formula"
},
{
"id":"tareas",
"texto":"tareas"
},
{
"id":"empaque",
"texto":"empaque"
},
{
"id":"cantidad",
"texto":"cantidad"
},
{
"id":"producto",
"texto":"producto"
},
{
"id":"lote",
"texto":"lote"
},
{
"id":"materias",
"texto":"Origen"
},
{
"id":"disponible",
"texto":"Disponible"
},
{
"id":"disponible",
"texto":"Disponible"
},
{
"id":"equipo",
"texto":"Equipo"
},
{
"id":"nombre",
"texto":"Nombre"
},
{
"id":"capacidad",
"texto":"Capacidad"
},
{
"id":"label3",
"texto":"quien?"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listacensos" method="GET" resourcePath="/listacensos" id="a9201dd8-a769-4a9e-8700-b70e7da9d869"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="0c7a2cf0-1ae7-45e4-8c11-55fa5237ffec" httpResponseStatus="200"><con:settings/><con:responseContent>{
"censos":
{"censo":
[{
"id":1,
"fecha":"2019-05-08",
"nombre":"Censo Mayo"
},
{
"id":2,
"fecha":"2019-06-02",
"nombre":"Censo Junio"
},
{
"id":3,
"fecha":"2018-11-08",
"nombre":"Censo Noviembre 2018"
},
{
"id":4,
"fecha":"2019-07-03",
"nombre":"Censo Julio"
},
{
"id":5,
"fecha":"2019-05-12",
"nombre":"Censo Mayo correctivo"
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listacensosarmados1" method="GET" resourcePath="/listacensosarmados1" id="d6d02441-3bd1-4c16-aa96-5c45cef07c53"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="14e6bf97-1b5b-41d8-a142-747b5e6389bc" httpResponseStatus="200"><con:settings/><con:responseContent>{"censos":
{"censo":
[
{
"id":1,
"iddepartamento":5,
"nombredepartamento":"Rawson",
"idareageo":2,
"nombreareageo":"Area Geografica 1",
"idmanzana":3,
"nombremanzana":"Manzana 3",
"calles":
[
{
"id":1,
"nombre":"Patagonia"
}
]
},
{
"id":2,
"iddepartamento":2,
"nombredepartamento":"Chimbas",
"idareageo":4,
"nombreareageo":"Area Geografica 4",
"idmanzana":5,
"nombremanzana":"Manzana 5",
"calles":
[
]
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listacensosarmados2" method="GET" resourcePath="/listacensosarmados2" id="335190b8-68fc-4b3e-83c0-7248b0e904bc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="012c0b77-7f05-438c-b2d9-1b2654aecf29" httpResponseStatus="200"><con:settings/><con:responseContent>{"censos":
{"censo":
[
{
"id":3,
"iddepartamento":8,
"nombredepartamento":"San Martin",
"idareageo":1,
"nombreareageo":"Area Geografica 1",
"idmanzana":15,
"nombremanzana":"Manzana 15",
"calles":
[
{
"id":1,
"nombre":"Patagonia"
},
{
"id":2,
"nombre":"Maradona"
},
]
},
{
"id":4,
"iddepartamento":19,
"nombredepartamento":"Caucete",
"idareageo":8,
"nombreareageo":"Area Geografica 8",
"idmanzana":25,
"nombremanzana":"Manzana 25",
"calles":
[
]
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/listacensosarmadostodo" method="GET" resourcePath="/listacensosarmadostodo" id="466309a6-824b-46be-9581-336d70264e0e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="d77c3554-6e94-4579-9dd2-0293030dd202" httpResponseStatus="200"><con:settings/><con:responseContent>{"censos":
{"censo":
[
{
"id":1,
"idcenso":1,
"iddepartamento":5,
"nombredepartamento":"Rawson",
"idareageo":2,
"nombreareageo":"Area Geografica 1",
"idmanzana":3,
"nombremanzana":"Manzana 3",
"calles":
[
{
"id":1,
"nombre":"Patagonia"
}
]
},
{
"id":2,
"idcenso":2,
"iddepartamento":2,
"nombredepartamento":"Chimbas",
"idareageo":4,
"nombreareageo":"Area Geografica 4",
"idmanzana":5,
"nombremanzana":"Manzana 5",
"calles":
[
]
},
{
"id":3,
"idcenso":2,
"iddepartamento":8,
"nombredepartamento":"San Martin",
"idareageo":1,
"nombreareageo":"Area Geografica 1",
"idmanzana":15,
"nombremanzana":"Manzana 15",
"calles":
[
{
"id":1,
"nombre":"Patagonia"
},
{
"id":2,
"nombre":"Maradona"
}
]
},
{
"id":4,
"idcenso":3,
"iddepartamento":19,
"nombredepartamento":"Caucete",
"idareageo":8,
"nombreareageo":"Area Geografica 8",
"idmanzana":25,
"nombremanzana":"Manzana 25",
"calles":
[
]
},
{
"id":5,
"idcenso":5,
"iddepartamento":11,
"nombredepartamento":"9 de Julio",
"idareageo":8,
"nombreareageo":"Area Geografica 8",
"idmanzana":4,
"nombremanzana":"Manzana 4",
"calles":
[
]
}
]
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/puntosmapa" method="GET" resourcePath="/puntosmapa" id="79cec417-f98a-40b3-8b19-63f132173d94"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="40560b55-e1ad-45d5-a7a8-c0c7e2d18681" httpResponseStatus="200"><con:settings/><con:responseContent>{"puntos":
{"punto":
[
{"id":1,
"lat":-31.5361,
"lng":-67.5264,
"direccion":"Patagonia 1417 O",
"tipo": "Brachichix"
},
{"id":2,
"lat":-31.5358,
"lng":-67.4464,
"direccion":"Rawson 1100 O",
"tipo": "Roble"
},
{"id":3,
"lat":-31.7061,
"lng":-67.5304,
"direccion":"Mendoza 40 S",
"tipo": "Palmera"
}
]
}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/punto2" method="GET" resourcePath="/punto2" id="11be45c8-0ed1-4033-9dca-ffd49f0a516f"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="5a551a8d-70a4-4f98-a1a7-ba1714227743" httpResponseStatus="200"><con:settings/><con:responseContent>{"punto":{
"id":"punto2",
"tipoarbol":"",
"calle":"Rawson",
"numero":"1100",
"barrio":"",
"taza":"no",
"tipotaza":"",
"fuste":"",
"alineacion":"",
"raices":"",
"cavidad":"",
"alttotal":"",
"altfuste":"",
"circ":"",
"copa":"",
"observaciones":"Literalmente estaba el arbol de harry potter en el medio de la vereda",
"ramas":"",
"estado":"",
"foto":"",
"acequia":"",
"cables":"",
"follaje":""
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/punto3" method="GET" resourcePath="/punto3" id="daa3d0cf-7bf9-434e-a97b-cc7bc9b866b4"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6376bcbb-e99f-4d88-828d-5e3c21c34554" httpResponseStatus="200"><con:settings/><con:responseContent>{"punto":{
"id":"punto3",
"tipoarbol":"Palmera",
"calle":"Mendoza",
"numero":"40",
"barrio":"Barrio del Carmen",
"taza":"si",
"tipotaza":"Con Tacon",
"fuste":"bifurcado",
"alineacion":"Ochava",
"raices":"Levanta Veredas",
"cavidad":"medio",
"alttotal":10.5,
"altfuste":4,
"circ":0.65,
"copa":5.5,
"observaciones":"Todo como el culo no se puede caminar con la vereda asi",
"ramas":"Quebradas",
"estado":"Enfermo",
"foto":"",
"acequia":"Permeabilizada",
"cables":"no",
"follaje":"Anormal"
}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/punto1" method="GET" resourcePath="/punto1" id="77edd652-2ff0-48ea-9fc2-71963952e278"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="18beed45-c7d0-46fb-b8f2-48587700c17d" httpResponseStatus="200"><con:settings/><con:responseContent>{"punto":{
"id":"punto1",
"tipoarbol":"Brachichix",
"calle":"Patagonia",
"numero":"1417",
"barrio":"Santo Domingo",
"taza":"si",
"tipotaza":"Con Tacon",
"fuste":"unico",
"alineacion":"Ochava",
"raices":"descubiertas",
"cavidad":"alto",
"alttotal":15.5,
"altfuste":2,
"circ":0.45,
"copa":4.5,
"observaciones":"Todo Bien",
"ramas":"Secas",
"estado":"Critico",
"foto":"",
"acequia":"Impermeabilizada",
"cables":"si",
"follaje":"normal"
}
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>